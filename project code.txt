private int transferToMultipleProject(int testRailProjectId, List<TestDefinition> allTestDefinitions,
			List<TestRail> tempLists, APIClient client) {
		int result = 0;
		try {
			for (TestDefinition testDefinition : allTestDefinitions) {
				// Create Container=suit
				if (testDefinition.getParentNodeId() == 0) {
					Map data = new HashMap();
					data.put("name", testDefinition.getName());
					data.put("description", testDefinition.getDescription());
					// Create suit in testRail
					String urlString = "add_suite/" + testRailProjectId;
					JSONObject suit = (JSONObject) client.sendPost(urlString, data);
					// set info to temp list
					TestRail testRail_suit = new TestRail(testRailProjectId,
							Integer.parseInt(suit.get("id").toString()), 0, 0, testDefinition.getNodeId());
					tempLists.add(testRail_suit);
					logger.info("[Create suite successful]Suit id:" + suit.get("id") + " ;name:" + suit.get("name"));
				}

				// Create Folder
				if (testDefinition.getParentNodeId() != 0 && testDefinition.getIsLeaf() == 0) {
					int suitId = 0;
					int parentId = 0;
					// Get suit id by sctm parent node ID
					for (TestRail testRail : tempLists) {
						// validate whether have parent section if not only
						// need
						// provide suit id, if existed suited,add parent
						// parameter
						if (testRail.getSctmNodeId() == testDefinition.getParentNodeId()) {
							suitId = testRail.getSuitId();
							Map sectionData = new HashMap();
							sectionData.put("name", testDefinition.getName());
							sectionData.put("description", testDefinition.getDescription());
							sectionData.put("suite_id", suitId);
							// if have sectionid yet,it mean this is a
							// sub-folder,if not have then mean this is the
							// root
							// section
							if (testRail.getSectionId() == 0) {
								JSONObject section = (JSONObject) client.sendPost("add_section/" + testRailProjectId,
										sectionData);
								// set info to temp list
								TestRail testRail_section = new TestRail(testRailProjectId, suitId,
										Integer.parseInt(section.get("id").toString()), 1, testDefinition.getNodeId());
								tempLists.add(testRail_section);
								logger.info("[Create section successful]Section id:" + section.get("id") + " ;name:"
										+ section.get("name"));
							} else {
								sectionData.put("parent_id", testRail.getSectionId());
								JSONObject section = (JSONObject) client.sendPost("add_section/" + testRailProjectId,
										sectionData);
								// set info to temp list
								TestRail testRail_section = new TestRail(testRailProjectId, suitId,
										Integer.parseInt(section.get("id").toString()), 1, testDefinition.getNodeId());
								tempLists.add(testRail_section);
								logger.info("[Create section successful]Section id:" + section.get("id") + " ;name:"
										+ section.get("name"));
							}
							break;
						} else {
							continue;
						}
					}
				}

				// Create Test case
				if (testDefinition.getParentNodeId() != 0 && testDefinition.getIsLeaf() == 1) {
					int sectionId = 0;
					// Get suit id by sctm parent node ID
					for (TestRail testRail : tempLists) {
						// validate whether have parent section if not only
						// need
						// provide suit id, if have need to provide parent
						// Id
						if (testRail.getSctmNodeId() == testDefinition.getParentNodeId()) {
							// if this is a case only saved below container
							// then
							// no section.
							// then program will create a section automatic
							if (testRail.getSectionId() != 0) {
								sectionId = testRail.getSectionId();
								Map caseData = new HashMap();
								caseData.put("title", testDefinition.getName());
								caseData.put("custom_description", testDefinition.getDescription());
								JSONObject tcase = (JSONObject) client.sendPost("add_case/" + sectionId, caseData);
								logger.info("[Create case successful]Case id:" + tcase.get("id") + " ;name:"
										+ tcase.get("title"));
							} else {
								// check if this suit contain Auto-create by
								// Program,
								// if have set all root cases into this
								// folder
								// if not create
								JSONArray allSections = (JSONArray) client.sendGet(
										"get_sections/" + testRailProjectId + "&suite_id=" + testRail.getSuitId());
								Boolean ifExist = false;
								for (int i = 0; i < allSections.size(); i++) {
									JSONObject joJsonObject = (JSONObject) allSections.get(i);
									if (joJsonObject.get("name").equals("Auto-create by Program")) {
										ifExist = true;
										sectionId = Integer.parseInt(joJsonObject.get("id").toString());
										Map caseData = new HashMap();
										caseData.put("title", testDefinition.getName());
										caseData.put("custom_description", testDefinition.getDescription());
										JSONObject tcase = (JSONObject) client.sendPost("add_case/" + sectionId,
												caseData);
										logger.info("[Create case successful]Case id:" + tcase.get("id") + " ;name:"
												+ tcase.get("title"));
										break;
									} else {
										continue;
									}
								}

								if (!ifExist) {
									// create a section
									Map sectionData = new HashMap();
									sectionData.put("name", "Auto-create by Program");
									sectionData.put("description", testDefinition.getDescription());
									sectionData.put("suite_id", testRail.getSuitId());
									JSONObject section = (JSONObject) client
											.sendPost("add_section/" + testRailProjectId, sectionData);
									// set info to temp list
									TestRail testRail_section = new TestRail(testRailProjectId, testRail.getSuitId(),
											Integer.parseInt(section.get("id").toString()), 1,
											testDefinition.getNodeId());
									tempLists.add(testRail_section);
									logger.info("[Create auto section successful]Section id:" + section.get("id")
											+ " ;name" + section.get("name"));
									sectionId = Integer.parseInt(section.get("id").toString());
									Map caseData = new HashMap();
									caseData.put("title", testDefinition.getName());
									caseData.put("custom_description", testDefinition.getDescription());
									JSONObject tcase = (JSONObject) client.sendPost("add_case/" + sectionId, caseData);
									logger.info("[Create case successful]Case id:" + tcase.get("id") + " ;name"
											+ tcase.get("title"));
								}
							}
							break;
						} else {
							continue;
						}
					}
				}

				result = 1;

			}
			logger.info("[Finished]Finshed transfer to 3 type multiple project.");

		} catch (Exception e) {
			result = 0;
			logger.error("[ERROR]Error happen in transfer to multiple project:" + e.getMessage());
		}
		return result;
	}




















", td.getName());
				data.put("description", td.getDescription());
				String urlString = "add_suite/" + testRailProjectId;
				JSONObject rootSection = (JSONObject) client.sendPost(urlString, data);
				sendCnt++;
				counter.addOne(sessionId);
				Object newLongId = rootSection.get("id");
				Integer newId = (newLongId instanceof Integer ? ((Integer) newLongId) : ((Long) newLongId).intValue());
				idMap.put(td.getNodeId(), newId);
				idSuiteIdMap.put(td.getNodeId(), newId);
			}

			List<TestDefinition> bufferSpaceForSections = new ArrayList<TestDefinition>();

			for (TestDefinition td : section) {
				int faterId = td.getParentNodeId();
				// father has been created
				if (idMap.containsKey(faterId)) {
					// transfer
					Map<String, Object> data = new HashMap<String, Object>();
					data.put("name", td.getName());
					data.put("description", td.getDescription());
					data.put("suite_id", idSuiteIdMap.get(faterId));
					if (idMap.get(faterId).equals(idSuiteIdMap.get(faterId))) {
						// father is a suite
						// data.put("parent_id", idMap.get(faterId));
					} else {
						// father is a section
						data.put("parent_id", idMap.get(faterId));
					}
					String urlString = "add_section/" + testRailProjectId;
					JSONObject rootSection = (JSONObject) client.sendPost(urlString, data);
					sendCnt++;
					counter.addOne(sessionId);
					Object newLongId = rootSection.get("id");
					Integer newId = (newLongId instanceof Integer ? ((Integer) newLongId)
							: ((Long) newLongId).intValue());
					idMap.put(td.getNodeId(), newId);
					idSuiteIdMap.put(td.getNodeId(), idSuiteIdMap.get(faterId));
				} else {
					// father hasn't been created
					bufferSpaceForSections.add(td);
				}
			}

			logger.info("bufferSpaceForSections size: " + bufferSpaceForSections.size());

			boolean first = true;
			int lastSize = -1;
			while (first || lastSize != bufferSpaceForSections.size()) {
				first = false;
				lastSize = bufferSpaceForSections.size();
				for (int i = 0; i < bufferSpaceForSections.size();) {
					TestDefinition td = bufferSpaceForSections.get(i);
					int faterId = td.getParentNodeId();
					// father has been created
					if (idMap.containsKey(faterId)) {
						// transfer
						Map<String, Object> data = new HashMap<String, Object>();
						data.put("name", td.getName());
						data.put("description", td.getDescription());
						data.put("suite_id", idSuiteIdMap.get(faterId));
						if (idMap.get(faterId).equals(idSuiteIdMap.get(faterId))) {
							// father is a suite
							// data.put("parent_id", idMap.get(faterId));
						} else {
							// father is a section
							data.put("parent_id", idMap.get(faterId));
						}
						String urlString = "add_section/" + testRailProjectId;
						JSONObject rootSection = (JSONObject) client.sendPost(urlString, data);
						sendCnt++;
						counter.addOne(sessionId);
						Object newLongId = rootSection.get("id");
						Integer newId = (newLongId instanceof Integer ? ((Integer) newLongId)
								: ((Long) newLongId).intValue());
						idMap.put(td.getNodeId(), newId);
						idSuiteIdMap.put(td.getNodeId(), idSuiteIdMap.get(faterId));
						bufferSpaceForSections.remove(i);
					} else
						i++;
				}
			}
			logger.info("bufferSpaceForSections size: " + bufferSpaceForSections.size());

			invalid = bufferSpaceForSections.size();
			
			// create cases
			for (TestDefinition td : testCase) {
				int faterId = td.getParentNodeId();
				// father has been created
				if (idMap.containsKey(faterId)) {
					// transfer
					Map<String, Object> data = new HashMap<String, Object>();
					data.put("title", td.getName());
					data.put("custom_description", td.getDescription());
					
					if(idMap.get(faterId).equals(idSuiteIdMap.get(faterId))) {		// father is a container
						if(defaultSectionMap.containsKey(idMap.get(faterId))) {		// default has been created
							int defaultSectionId = defaultSectionMap.get(idMap.get(faterId));
							client.sendPost("add_case/" + defaultSectionId, data);
							sendCnt++;
							counter.addOne(sessionId);
						} else {
							// create a default section
							Map<String, Object> data2 = new HashMap<String, Object>();
							data2.put("name", "default section");
							data2.put("description", "this section includes cases whose father nodes are containers");
							data2.put("suite_id", idMap.get(faterId));
							String urlString = "add_section/" + testRailProjectId;
							JSONObject rootSection = (JSONObject) client.sendPost(urlString, data2);
							sendCnt++;
							counter.addOne(sessionId);
							Object newLongId = rootSection.get("id");
							Integer newId = (newLongId instanceof Integer ? ((Integer) newLongId)
									: ((Long) newLongId).intValue());
							defaultSectionMap.put(idMap.get(faterId), newId);
							// insert this case into default section
							client.sendPost("add_case/" + newId, data);
							sendCnt++;
							counter.addOne(sessionId);
						}
					}
					else {
						client.sendPost("add_case/" + idMap.get(faterId), data);
						sendCnt++;
						counter.addOne(sessionId);
					}
				} else
					invalid++;
			}
			
			counter.destroy(sessionId);
			result.setCode(1);;
			logger.info("[Finished]Finshed transfer to sigle 1 type project.");

		} catch (Exception e) {
			result.setCode(0);
			result.setDesc(e.getMessage());
			e.printStackTrace();
			counter.destroy(sessionId);
			logger.error("[ERROR]Error happen in transfer to sigle 1 type project:" + e.getMessage());
		}
		logger.info("sendCnt = " + ((client instanceof MyTestClient) ? ((MyTestClient) client).getCnt() : "-") + "("
				+ sendCnt + "), invalid = " + invalid);
		return result;
	}